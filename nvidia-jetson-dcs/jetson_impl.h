/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.2.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: Thursday, October 10, 2019
 ***********************************************************************************************/

#ifndef JETSON_IMPL
#define JETSON_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct DEEPSTREAM_SETDEEPSTREAMCONFIG_setDeepStreamConfigResponse_TAG
{
    char* description;

} DEEPSTREAM_SETDEEPSTREAMCONFIG_setDeepStreamConfigResponse;

/**
* Device telemetries related methods.
*/

double Thermalzones_Telemetry_ReadThermal_zone_0();

double Thermalzones_Telemetry_ReadThermal_zone_1();

double Thermalzones_Telemetry_ReadThermal_zone_2();

double Thermalzones_Telemetry_ReadThermal_zone_3();

double Thermalzones_Telemetry_ReadThermal_zone_4();

double Thermalzones_Telemetry_ReadThermal_zone_5();

bool Deepstream_Telemetry_ReadDeepstream_status();

int Deepstream_Telemetry_ReadDeepstream_detections();

/**
* Device properties related methods.
*/

char* Deviceinfo_Property_GetManufacturer();

char* Deviceinfo_Property_GetModel();

char* Deviceinfo_Property_GetSwVersion();

char* Deviceinfo_Property_GetOsName();

char* Deviceinfo_Property_GetProcessorArchitecture();

char* Deviceinfo_Property_GetProcessorManufacturer();

long Deviceinfo_Property_GetTotalStorage();

long Deviceinfo_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

DIGITALTWIN_COMMAND_RESULT Deepstream_Command_SetDeepStreamConfig(char* deepStreamConfigPath, DEEPSTREAM_SETDEEPSTREAMCONFIG_setDeepStreamConfigResponse* response, unsigned int* statusCode);

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // JETSON_IMPL
