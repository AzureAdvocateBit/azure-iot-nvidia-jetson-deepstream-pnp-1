/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.2.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: Thursday, October 10, 2019
 ***********************************************************************************************/

#ifndef THERMALZONES_INTERFACE_H
#define THERMALZONES_INTERFACE_H

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "digitaltwin_interface_client.h"
#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"

#include "digitaltwin_client_helper.h"
#include "digitaltwin_serializer.h"
#include "parson.h"
#include "../jetson_impl.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum THERMALZONES_TELEMETRY_TAG
{
    Thermalzones_THERMAL_ZONE_0_TELEMETRY,
    Thermalzones_THERMAL_ZONE_1_TELEMETRY,
    Thermalzones_THERMAL_ZONE_2_TELEMETRY,
    Thermalzones_THERMAL_ZONE_3_TELEMETRY,
    Thermalzones_THERMAL_ZONE_4_TELEMETRY,
    Thermalzones_THERMAL_ZONE_5_TELEMETRY
} THERMALZONES_TELEMETRY;

// DigitalTwin interface name from service perspective.
static const char ThermalzonesInterfaceId[] = "urn:nvidia:thermal_zones:1";
static const char ThermalzonesInterfaceInstanceName[] = "thermalzones";

// Telemetry names for this interface.

static const char ThermalzonesInterface_Thermal_zone_0Telemetry[] = "thermal_zone_0";

static const char ThermalzonesInterface_Thermal_zone_1Telemetry[] = "thermal_zone_1";

static const char ThermalzonesInterface_Thermal_zone_2Telemetry[] = "thermal_zone_2";

static const char ThermalzonesInterface_Thermal_zone_3Telemetry[] = "thermal_zone_3";

static const char ThermalzonesInterface_Thermal_zone_4Telemetry[] = "thermal_zone_4";

static const char ThermalzonesInterface_Thermal_zone_5Telemetry[] = "thermal_zone_5";

// Property names for this interface.

// Command names for this interface

// Methods
DIGITALTWIN_INTERFACE_CLIENT_HANDLE ThermalzonesInterface_Create();

void ThermalzonesInterface_Close(DIGITALTWIN_INTERFACE_CLIENT_HANDLE digitalTwinInterfaceClientHandle);

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_0();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_1();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_2();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_3();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_4();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendThermal_zone_5();

DIGITALTWIN_CLIENT_RESULT ThermalzonesInterface_Telemetry_SendAll();

#ifdef __cplusplus
}
#endif

#endif  // THERMALZONES_INTERFACE_H
